/*/
 * Copyright (c) 2020 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 *                                                  Martin Jacquet - June 2020
 */
/* ---- Includes ---------------------------------------------------------- */
#pragma require "openrobots2-idl >= 2.0"
#pragma require "vision-idl"

#include "or/pose/pose_estimator.gen"
#include "or/sensor/camera.gen"
#include "or/sensor/pixel.idl"

/* ---- Component declaration --------------------------------------------- */
component arucotag {
    version         "2.1";
    email           "martin.jacquet@laas.fr";
    lang			"c";
    require         "genom3 >= 2.99.26";
    codels-require  "opencv4",  /* Or opencv4 >= 4.1.1 */
                    "eigen3";

    /* ---- Exceptions ---------------------------------------------------- */
    exception e_sys { short code; string<128> what; };
    exception e_io { string<128> what; };

    /* ---- Types --------------------------------------------------------- */
    native calib_s;
    native detector_s;

    native log_s;

    typedef string<128> portinfo;

    /* ---- Ports --------------------------------------------------------- */
    port multiple out or_pose_estimator::state pose;
    port multiple out or::sensor::pixel pixel_pose;
    port in or_pose_estimator::state    drone;
    port in or::sensor::frame           frame;
    port in or::sensor::intrinsics      intrinsics;
    port in or::sensor::extrinsics      extrinsics;

    port out or::sensor::frame output;

    /* ---- IDS ----------------------------------------------------------- */
    ids {
        boolean stopped;    // toggle the component

        short out_frame;
        struct tag_info_s {
            float length;
            unsigned short s_pix;   // arbitrary isotropic pixel variance for tag corners
        } tag_info;

        calib_s calib;
        detector_s detect;

        or::time::ts last_ts;
        sequence<portinfo> ports;
        log_s log;
    };

    const unsigned short pause_ms = 1;  // pause between frame polling in ms

    /* ---- Main task ----------------------------------------------------- */
    task detect {
        codel<start> detect_start(out ::ids)
            yield wait;

        codel<wait> detect_wait(in intrinsics, in extrinsics, in tag_info.length, out calib)
            yield pause::wait, poll;

        codel<poll> detect_poll(in stopped, in ports, in frame, inout last_ts)
            yield pause::poll, poll, main;

        codel<main> detect_main(in frame, in tag_info.s_pix, in calib, in drone, inout detect, out output, in ports, out pose, out pixel_pose, in out_frame)
            yield poll, log;

        codel<log> detect_log(in detect, in ports, in pose, in pixel_pose, in out_frame, inout log)
            yield poll;
    };

    activity add_marker(in string<16> marker = : "Marker name") {
        task detect;
        throw e_io;
        codel<start> add_marker(in marker, out ports, out pose, out pixel_pose)
            yield ether;
    };

    activity remove_marker(in string<16> marker = : "Marker name") {
        task detect;
        throw e_io;
        codel<start> remove_marker(in marker, out ports, out pose, out pixel_pose)
            yield ether;
    };

    /* ---- Getters/Setters ----------------------------------------------- */
    activity set_calib() {
        task detect;
        doc "Read calibration from input ports and update internal matrices.";
        throw e_io;
        codel<start> set_calib(in intrinsics, in extrinsics, out calib)
            yield ether;
    };

    attribute set_length(in tag_info.length = : "Length of tags") {
        validate set_length(local in length, out detect);
    };

    attribute set_pix_cov(in tag_info.s_pix = 2 : "Isotropic pixel covariance of corners of the tags");

    attribute output_frame(in out_frame = 0: "desired output frame (0: camera; 1: body; 2: world)") {
        doc "Sets the frame in which the output coordinates are expressed.";
        doc "Possible frames are camera (0), body (1) or world (2).";
        doc "(1) assumes that the extrinsic parameters of the camera are properly set.";
        doc "(2) assumes (1) and that the drone input port is connected.";
        validate output_frame(local in out_frame);
        throw e_sys;
    };

    /* ---- Toggle pause -------------------------------------------------- */
    function stop() {
        doc "Stops the component until resume() is called.";
        codel stop(out stopped);
    };

    function resume() {
        doc "Restarts the component if stop() was called.";
        codel resume(out stopped);
    };

    /* ---- Logging ------------------------------------------------------- */
    function log(in string<64> path = "/tmp/arucotag.log": "Log file name",
                 in unsigned long decimation = 1: "Reduced logging frequency") {
        throw e_sys;
        codel log_start(in path, in decimation, inout log);
    };

    function log_stop() {
        codel log_stop(out log);
    };

    function log_info(out unsigned long miss = : "Missed log entries",
                      out unsigned long total = : "Total log entries") {
        codel log_info(in log, out miss, out total);
    };

};
